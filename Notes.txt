- In Flask, handlers for the application routes are written as Python functions, called view functions. View functions are mapped to one or more route URLs so that Flask knows what logic to execute when a client requests a given URL.

- @decorators: A common pattern with decorators is to use them to register functions as callbacks for certain events

- !! Always check what directory you're in with the command prompt !!

- Flask allows you to register environment variables that you want to be automatically imported when you run the flask command. Use this option with the python-dotenv package: create a .flaskenv file in your root folder and add the FLASK_APP env variable in it

- Placeholders for the dynamic content are enclosed in {{ ... }} sections. These placeholders represent the parts of the page that are variable and will only be known at runtime. The Jinja2 template engine substitutes {{ ... }} blocks with the corresponding values, given by the arguments provided in the render_template() call.

- Coonfiguration: best practice is to use a class in a separate file for your configuration settings. As the app grows, you can add more configuration settings to this class

- The form.hidden_tag() template argument (check /register.html) generates a hidden field that includes a token that is used to protect the form against CSRF attacks. All you need to do to have the form protected is include this hidden field and have the SECRET_KEY variable defined in the Flask configuration. If you take care of these two things, Flask-WTF does the rest for you.

- Flask-SQLAlchemy is a popular flask extension, it is an Object Relational Mapper or ORM. ORMs allow applications to manage a database using high-level entities such as classes, objects and methods instead of tables and SQL. The job of the ORM is to translate the high-level operations into database commands. SQLAlchemy supports a long list of database engines, including the popular MySQL, PostgreSQL and SQLite.

- The ORM layer within SQLAlchemy will do the translations required to map objects created from the database models (classes) into rows in the proper database tables.

- Each time any changes have been made to the database models, you need to do a db migration (flask db migrate) and then apply them to the database with 'flask db upgrade'. It is very useful to work with a migration framework. Any users that were in the database are still there, the migration framework surgically applies the changes in the migration script without destroying any data.

- Flask-Login keeps track of the logged in user by storing its unique identifier in Flask's user session, a storage space assigned to each user who connects to the application.

------------------------------- my sample username: Sasha; password: Sashka555, email: sasha@me.com (and also User2, psw: User2isloco user2@example.com)

- The _ prefix in a template's name is just a naming convention to help me recognize which template files are sub-templates.